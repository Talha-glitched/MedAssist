version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: mediassist-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: mediassist
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - mediassist-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: mediassist-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mediassist-network

  # Backend API Gateway
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mediassist-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/mediassist?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRE: 7d
      FRONTEND_URL: http://localhost:3000
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      REDIS_URL: redis://redis:6379
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    networks:
      - mediassist-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:5000/api
    container_name: mediassist-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - mediassist-network

  # Speech-to-Text Service
  stt-service:
    build:
      context: ./services/stt
      dockerfile: Dockerfile
    container_name: mediassist-stt
    restart: unless-stopped
    environment:
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      MODEL_NAME: openai/whisper-large-v3
      MAX_AUDIO_SIZE: 50MB
    ports:
      - "8001:8000"
    volumes:
      - ./services/stt/models:/app/models
      - ./services/stt/temp:/app/temp
    networks:
      - mediassist-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # NLP Processing Service
  nlp-service:
    build:
      context: ./services/nlp
      dockerfile: Dockerfile
    container_name: mediassist-nlp
    restart: unless-stopped
    environment:
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      MODEL_NAME: google/flan-t5-large
      MAX_TEXT_LENGTH: 5000
    ports:
      - "8002:8000"
    volumes:
      - ./services/nlp/models:/app/models
    networks:
      - mediassist-network
    deploy:
      resources:
        limits:
          memory: 6G
        reservations:
          memory: 3G

  # Translation Service
  translation-service:
    build:
      context: ./services/translation
      dockerfile: Dockerfile
    container_name: mediassist-translation
    restart: unless-stopped
    environment:
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      SUPPORTED_LANGUAGES: en,es,ur,fr,de,it,pt,ru,ar,hi
    ports:
      - "8003:8000"
    volumes:
      - ./services/translation/models:/app/models
    networks:
      - mediassist-network
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1.5G

  # Text-to-Speech Service
  tts-service:
    build:
      context: ./services/tts
      dockerfile: Dockerfile
    container_name: mediassist-tts
    restart: unless-stopped
    environment:
      TTS_ENGINE: coqui
      VOICE_MODELS_PATH: /app/models/voices
      MAX_TEXT_LENGTH: 2000
    ports:
      - "8004:8000"
    volumes:
      - ./services/tts/models:/app/models
      - ./services/tts/audio:/app/audio
    networks:
      - mediassist-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: mediassist-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - mediassist-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: mediassist-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mediassist-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: mediassist-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - mediassist-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mediassist-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16